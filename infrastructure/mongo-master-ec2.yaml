# Note, the development environment will only spin a min of 1 instance (Not HA Support)
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template deploys an instance for Mongo Master Instance.

Parameters: 

  PMServerEnv:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"

  PMKeyName:
    Description: "Enter an existing EC2 KeyPair. Default is mk2acc-nv"
    Type: "String"

  PMEnvVPC:
    Description: "Stack VPC Environment"
    Type: "String"

  PMmmsVersion:
    Description: "Agent mms Version."
    Type: "String" 

  PMmmsGroupId:
    Description: "Agent mms GroupId."
    Type: "String" 

  PMmmsApiKey:
    Description: "Agent mms Api Key."
    Type: "String" 

  PMHostedZone:
    Description: "Hosted Domain Zone."
    Type: "String"

  PMInstanceType: 
    Description: "Enter t2.micro or m1.small. Default is m4.xlarge."
    Type: "String"

  PMRaidVolGBSize:
    Description: "Enter size of Raid Size for Data partition"
    Type: "String"

  PMEbsOptimized:
    Description: "Set EBS Optimize support true or false."
    Type: "String"

  PMRegionAMI:
    Description: "A reference to the Region AMI"
    Type: "String"

  PMMongoReplicatesetName:
    Description: "A reference to the Mongo Replica Set"
    Type: "String"

  PMDomainMongoSecondary1:
    Description: "A reference to the Mongo Secondary 1 FQDN domain name"
    Type: "String"

  PMDomainMongoSecondary2:
    Description: "A reference to the Mongo Secondary 2 FQDN domain name"
    Type: "String"

  PMDomainMongoMaster:
    Description: "A reference to the Mongo Master FQDN domain name"
    Type: "String"

  PMIAMS3CWInstanceProfile:
    Description: "A reference to the IamInstanceProfile"
    Type: "String"

Resources:

  MyMongoMSEC2:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName: !Ref "PMKeyName"
      EbsOptimized: !Ref "PMEbsOptimized"
      AvailabilityZone: !Select [ '1', !GetAZs ]
      InstanceType: !Ref "PMInstanceType"
      BlockDeviceMappings:
        # Root Mount Device
        - DeviceName: "/dev/xvda"
          Ebs:
            # Increasing the volume size will actually cause to spin another
            # ec2 instance and shut down the existing old volume
            VolumeSize: "10" # Format: GB
            VolumeType: "gp2"
        # Additional Mount Device - /log
        - DeviceName: "xvdb"
          Ebs:
            VolumeSize: "10"
            VolumeType: "gp2"
      IamInstanceProfile:
        Ref: "PMIAMS3CWInstanceProfile"
      ImageId:
        Ref: "PMRegionAMI"
      SubnetId:
        Fn::ImportValue: !Sub "${PMEnvVPC}-PublicSubnet2"
        # Fn::ImportValue: !Sub "${PMEnvVPC}-PrivateSubnet3"
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${PMServerEnv}-MyMongoSG"
      Tags:
        - Key: "Name"
          Value: !Sub "${PMDomainMongoMaster}"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update

          # Init Start Slow (wait for 10 sec)
          sleep 10

          # Install AWS cfn-bootstrap utilities
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # install mongodb (3.6.x)
          apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
          echo "deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.6 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list
          apt-get update && apt-get install -y mongodb-org
          curl 'https://raw.githubusercontent.com/mongodb/mongo/master/debian/init.d' -o /etc/init.d/mongod
          chmod +x /etc/init.d/mongod
          update-rc.d mongod defaults

          # Pre-Install & Pre-setup
          export DEBIAN_FRONTEND=noninteractive
          apt-get install -y xfsprogs dracut numactl
          apt-get -q -y install mdadm --no-install-recommends
          sudo touch /var/lib/cloud/instance/locale-check.skip
          echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale
          echo '${PMDomainMongoMaster}' > /etc/hostname
          # Update hostname on the fly
          hostname ${PMDomainMongoMaster}

          # Append hostname that resolve to proper fqdn, hostname -f
          # This is mainly use by monitoring server
          echo '127.0.0.1 ${PMDomainMongoMaster}' >> /etc/hosts

          # Create Partition (Leave the 2 empty space line below)
          hdd="/dev/xvdb /dev/xvdc /dev/xvdd /dev/xvde /dev/xvdf"
          for i in $hdd;do
          echo "d
          n
          p
          1


          w
          "|fdisk $i;done 

          # Setup RAID 10
          mdadm --create --verbose /dev/md0 -c 256 --level=10 --raid-devices=4 /dev/xvdc1 /dev/xvdd1 /dev/xvde1 /dev/xvdf1
          mdadm --detail --scan --verbose >> /etc/mdadm/mdadm.conf

          # Format Partition
          mkfs.ext4 -F /dev/xvdb1
          mkfs.xfs -f /dev/md0

          # Create Directory
          mkdir -p /data
          mkdir -p /log
          mkdir -p /journal

          # Get Partition Blkid and Install fstab
          PART_ID=$(blkid -o value -s UUID /dev/xvdb1)
          RAID_ID=$(blkid -o value -s UUID /dev/md0)
          echo "UUID=$PART_ID	/log	ext4" >> /etc/fstab
          echo "UUID=$RAID_ID	/data	xfs defaults,auto,noatime,noexec 0 0" >> /etc/fstab

          # Install mount & Change directory ownership
          mount -a
          chown -R mongodb:mongodb /data
          chown -R mongodb:mongodb /log
          chown -R mongodb:mongodb /journal

          #Setup MongoDB
          service mongod stop

          #Cleanup & Inital setup
           rm -rf /data/*
           rm -rf /var/lib/mongodb/*

          #Initial Conf Setup
          echo "# Where and how to store data.
          storage:
            dbPath: /data
            engine: \"wiredTiger\"
            wiredTiger:
              collectionConfig:
                blockCompressor: snappy
            directoryPerDB: true

          # where to write logging data.
          systemLog:
            destination: file
            logAppend: true
            logRotate: reopen
            path: \"/log/mongod.log\"
            timeStampFormat: iso8601-utc

          # network interfaces
          net:
            port: 27017
            bindIp: 0.0.0.0

          security:
            authorization: \"disabled\"

          setParameter:
            enableLocalhostAuthBypass: false

          replication:
            replSetName: \"${PMMongoReplicatesetName}\"
          " > /etc/mongod.conf

          # MongoDB Start
          service mongod start

          # Waiting until MongoDB is UP and Running...
          # Workaround to avoid comparison and therefor using parentheses in sentence
          while [ -z $(echo "db.serverStatus()" | mongo 127.0.0.1/test 2>&1 | awk ' /uptimeMillis/ { print $3}') ]; do echo -e "Waiting to connect to mongod"; sleep 10; done

          # MongoDB Process Start Slow (wait for 5 sec)
          #sleep 30
          # Stage 1 : Initialize Replication Cluster
          cat <<EOF > /tmp/replicaSetConfigInit.js
          rs.initiate();
          EOF
          /usr/bin/mongo /tmp/replicaSetConfigInit.js > /tmp/replicaSetConfigInit.log

          # MongoDB Process Start Slow (wait for 5 sec)
          sleep 5

          # Stage 4 : Add New Replication Cluster
          cat <<EOF > /tmp/replicaSetAddCluster.js
          cfg = rs.conf();
          cfg.members[0].priority = 2;
          rs.reconfig(cfg);
          rs.add("${PMDomainMongoSecondary1}");
          rs.add("${PMDomainMongoSecondary2}");
          cfg = rs.conf();
          cfg.members[1].priority = 1.5;
          cfg.members[2].priority = 1.0;
          rs.reconfig(cfg);
          EOF
          # Live - moneylion ssl cert
          /usr/bin/mongo --host ${PMDomainMongoMaster} /tmp/replicaSetAddCluster.js > /tmp/replicaSetAddCluster.log

          # Install Cloud Mongo Automation
          curl -OL https://cloud.mongodb.com/download/agent/automation/mongodb-mms-automation-agent-manager_${PMmmsVersion}_amd64.ubuntu1604.deb
          dpkg -i mongodb-mms-automation-agent-manager_${PMmmsVersion}_amd64.ubuntu1604.deb
          sed -i 's/mmsGroupId=/mmsGroupId=${PMmmsGroupId}/g' /etc/mongodb-mms/automation-agent.config
          sed -i 's/mmsApiKey=/mmsApiKey=${PMmmsApiKey}/g' /etc/mongodb-mms/automation-agent.config
          sed -i 's/logFile=\/var\/log\/mongodb-mms-automation\/automation-agent.log/logFile=\/log\/mongodb-mms-automation\/automation-agent.log/g' /etc/mongodb-mms/automation-agent.config
          systemctl start mongodb-mms-automation-agent.service

          # Signal Terminate
          /usr/local/bin/cfn-signal -e 0 -r 'server setup complete' "${WaitHandle}"  > /tmp/userdata.log

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !Ref "WaitHandle"
      Timeout: '600'

  # Create New Volume (Raid10 - /data)
  NewVolume1:
    Type: "AWS::EC2::Volume"
    Properties:
      Size: !Ref "PMRaidVolGBSize"
      VolumeType: "gp2"
      Encrypted: 'true'
      AvailabilityZone:
        Fn::GetAtt:
        - "MyMongoMSEC2"
        - "AvailabilityZone"
      Tags:
      - Key: "Name"
        Value: !Sub "${PMDomainMongoMaster}-/data"
    DeletionPolicy: "Delete"

  # Create New Volume (Raid10 - /data)
  NewVolume2:
    Type: "AWS::EC2::Volume"
    Properties:
      Size: !Ref "PMRaidVolGBSize"
      VolumeType: "gp2"
      Encrypted: 'true'
      AvailabilityZone:
        Fn::GetAtt:
        - "MyMongoMSEC2"
        - "AvailabilityZone"
      Tags:
      - Key: "Name"
        Value: !Sub "${PMDomainMongoMaster}-/data"
    DeletionPolicy: "Delete"

  # Create New Volume (Raid10 - /data)
  NewVolume3:
    Type: "AWS::EC2::Volume"
    Properties:
      Size: !Ref "PMRaidVolGBSize"
      VolumeType: "gp2"
      Encrypted: 'true'
      AvailabilityZone:
        Fn::GetAtt:
        - "MyMongoMSEC2"
        - "AvailabilityZone"
      Tags:
      - Key: "Name"
        Value: !Sub "${PMDomainMongoMaster}-/data"
    DeletionPolicy: "Delete"

  # Create New Volume (Raid10 - /data)
  NewVolume4:
    Type: "AWS::EC2::Volume"
    Properties:
      Size: !Ref "PMRaidVolGBSize"
      VolumeType: "gp2"
      Encrypted: 'true'
      AvailabilityZone:
        Fn::GetAtt:
        - "MyMongoMSEC2"
        - "AvailabilityZone"
      Tags:
      - Key: "Name"
        Value: !Sub "${PMDomainMongoMaster}-/data"
    DeletionPolicy: "Delete"

  # Attach new volume to the existing EC2 instance
  MountPoint1:
    Type: "AWS::EC2::VolumeAttachment"
    Properties:
      InstanceId:
        Ref: "MyMongoMSEC2"
      VolumeId:
        Ref: "NewVolume1"
      Device: "xvdc"

  # Attach new volume to the existing EC2 instance
  MountPoint2:
    Type: "AWS::EC2::VolumeAttachment"
    Properties:
      InstanceId:
        Ref: "MyMongoMSEC2"
      VolumeId:
        Ref: "NewVolume2"
      Device: "xvdd"

  # Attach new volume to the existing EC2 instance
  MountPoint3:
    Type: "AWS::EC2::VolumeAttachment"
    Properties:
      InstanceId:
        Ref: "MyMongoMSEC2"
      VolumeId:
        Ref: "NewVolume3"
      Device: "xvde"

  # Attach new volume to the existing EC2 instance
  MountPoint4:
    Type: "AWS::EC2::VolumeAttachment"
    Properties:
      InstanceId:
        Ref: "MyMongoMSEC2"
      VolumeId:
        Ref: "NewVolume4"
      Device: "xvdf"

  DNSRecordMongoSEC1EC2:
    Type: "AWS::Route53::RecordSet"
    DependsOn:
    - "MyMongoMSEC2"
    Properties:
      HostedZoneName: !Sub "${PMHostedZone}."
      Comment: "DNS name for Mongo Master."
      Name: !Sub "${PMDomainMongoMaster}."
      Type: 'A'
      TTL: '300'
      ResourceRecords:
      - Fn::GetAtt:
        - "MyMongoMSEC2"
        - "PrivateIp"

Outputs:

  MyMongoMSEC2IPAddress:
    Description: "Private IP address of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "MyMongoMSEC2"
      - "PrivateIp"
